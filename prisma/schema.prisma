// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String  @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified Boolean?
    image         String?

    accounts Account[]
    sessions Session[]

    orderHistory orderHistory[]
    orders       order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model AdminProfile {
    id      String @id @default(uuid())
    adminId String @unique
    name    String
    email   String @unique
    imgUrl  String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([email])
}
enum OrderStatus {
    processing
    shipped
    delivered
    canceled
}
//processing, shipped, delivered, canceled

model order {
    id          String      @id @default(uuid())
    orderStatus OrderStatus @default(processing)
    quantity    Int
    total       Int

    product Product[]

    orderHistoryId String
    history        orderHistory @relation(fields: [orderHistoryId], references: [id], onDelete: Cascade)
    User           User?        @relation(fields: [userId], references: [id])
    userId         String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([orderHistoryId])
}

model orderHistory {
    id             String   @id @default(uuid())
    dateOfPurchase DateTime
    orderTotal     Int
    orderStatus    String
    orderDate      DateTime

    orders order[]

    userId String
    User   User   @relation(fields: [userId], references: [id])
}

model Product {
    id           String @id @default(uuid())
    name         String @unique
    price        Int
    productImage String @db.Text
    productId    String

    order order @relation(fields: [productId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
